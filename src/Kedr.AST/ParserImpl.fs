// ---------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// ---------------------------------------------------------------------
module internal Kedr.AST.ParserImpl

type Terminal =
    | T_colon
    | T_eq
    | T_id of (string)
    | T_let
    | T_numlit of (uint32 * uint32 option)
    | T_parenc
    | T_pareno
    | T_strlit of (string)

type Reducer = {
    BINDPARAMS_ : BindingParameter list
    BINDPARAMS_BINDPARAMS_BINDPARAM : (BindingParameter list) * (BindingParameter) -> BindingParameter list
    BINDPARAM_id : (string) -> BindingParameter
    BINDPARAM_pareno_id_colon_id_parenc : (string) * (string) -> BindingParameter
    BIND_let_id_BINDPARAMS_TYPEANNOT_eq_EXPR : (string) * (BindingParameter list) * (TypeId option) * (Expr) -> Binding
    EAPP_EAPP_EPAREN : (Expr) * (Expr) -> Expr
    EAPP_EPAREN : (Expr) -> Expr
    EPAREN_ESIMP : (Expr) -> Expr
    EPAREN_pareno_EPAREN_parenc : (Expr) -> Expr
    ESIMP_id : (string) -> Expr
    ESIMP_numlit : (uint32 * uint32 option) -> Expr
    ESIMP_strlit : (string) -> Expr
    EXPR_EAPP : (Expr) -> Expr
    PROGRAM_BIND : (Binding) -> Program
    PROGRAM_EXPR : (Expr) -> Program
    TYPEANNOT_ : TypeId option
    TYPEANNOT_colon_id : (string) -> TypeId option
}

let private failwithInvalidState () = failwith "Parser is in an invalid state. This is a bug in the parser generator."

let parse (reducer : Reducer) (input : Terminal seq) : Result<Program, string> =
    use inputEnumerator = input.GetEnumerator()
    let lhsStack = System.Collections.Stack(50)
    let stateStack = System.Collections.Generic.Stack<int>(50)
    let mutable result = Unchecked.defaultof<Program>
    let mutable accepted = false

    stateStack.Push(0)

    let mutable (lookahead, lookaheadIsEof) =
        if inputEnumerator.MoveNext()
        then (inputEnumerator.Current, false)
        else (Unchecked.defaultof<Terminal>, true)

    let mutable keepGoing = true
    while keepGoing do
        match stateStack.Peek() with
        | 0 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(21)
            | T_let ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(1)
            | T_numlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(22)
            | T_pareno ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(17)
            | T_strlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(23)
            | _ ->
                // error
                keepGoing <- false
        | 1 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(2)
            | _ ->
                // error
                keepGoing <- false
        | 2 ->
            match lookahead with
            | T_colon ->
                // reduce
                let reduced = reducer.BINDPARAMS_
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_eq ->
                // reduce
                let reduced = reducer.BINDPARAMS_
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                let reduced = reducer.BINDPARAMS_
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                let reduced = reducer.BINDPARAMS_
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 3 ->
            match lookahead with
            | T_colon ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(26)
            | T_eq ->
                // reduce
                let reduced = reducer.TYPEANNOT_
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 4
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(7)
            | T_pareno ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(8)
            | _ ->
                // error
                keepGoing <- false
        | 4 ->
            match lookahead with
            | T_eq ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(5)
            | _ ->
                // error
                keepGoing <- false
        | 5 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(21)
            | T_numlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(22)
            | T_pareno ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(17)
            | T_strlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(23)
            | _ ->
                // error
                keepGoing <- false
        | 6 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg4 = lhsStack.Pop() :?> Expr
                let arg3 = lhsStack.Pop() :?> TypeId option
                let arg2 = lhsStack.Pop() :?> BindingParameter list
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1, arg2, arg3, arg4)
                let reduced = reducer.BIND_let_id_BINDPARAMS_TYPEANNOT_eq_EXPR reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 24
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 7 ->
            match lookahead with
            | T_colon ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.BINDPARAM_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_eq ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.BINDPARAM_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.BINDPARAM_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.BINDPARAM_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 8 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(9)
            | _ ->
                // error
                keepGoing <- false
        | 9 ->
            match lookahead with
            | T_colon ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(10)
            | _ ->
                // error
                keepGoing <- false
        | 10 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(11)
            | _ ->
                // error
                keepGoing <- false
        | 11 ->
            match lookahead with
            | T_parenc ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(12)
            | _ ->
                // error
                keepGoing <- false
        | 12 ->
            match lookahead with
            | T_colon ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> string
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAM_pareno_id_colon_id_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_eq ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> string
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAM_pareno_id_colon_id_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> string
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAM_pareno_id_colon_id_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> string
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAM_pareno_id_colon_id_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 13
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 13 ->
            match lookahead with
            | T_colon ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> BindingParameter
                let arg1 = lhsStack.Pop() :?> BindingParameter list
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAMS_BINDPARAMS_BINDPARAM reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_eq ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> BindingParameter
                let arg1 = lhsStack.Pop() :?> BindingParameter list
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAMS_BINDPARAMS_BINDPARAM reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> BindingParameter
                let arg1 = lhsStack.Pop() :?> BindingParameter list
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAMS_BINDPARAMS_BINDPARAM reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> BindingParameter
                let arg1 = lhsStack.Pop() :?> BindingParameter list
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.BINDPARAMS_BINDPARAMS_BINDPARAM reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 2 -> 3
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 14 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EXPR_EAPP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 25
                    | 5 -> 6
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(21)
            | T_numlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(22)
            | T_pareno ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(17)
            | T_strlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(23)
            | _ ->
                // error
                keepGoing <- false
        | 15 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> Expr
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.EAPP_EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> Expr
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.EAPP_EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> Expr
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.EAPP_EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> Expr
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.EAPP_EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg2 = lhsStack.Pop() :?> Expr
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1, arg2)
                let reduced = reducer.EAPP_EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 16 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EAPP_EPAREN reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 14
                    | 5 -> 14
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 17 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(21)
            | T_numlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(22)
            | T_pareno ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(17)
            | T_strlit x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(23)
            | _ ->
                // error
                keepGoing <- false
        | 18 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_ESIMP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_ESIMP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_ESIMP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_parenc ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_ESIMP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_ESIMP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_ESIMP reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 19 ->
            match lookahead with
            | T_parenc ->
                // shift
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(20)
            | _ ->
                // error
                keepGoing <- false
        | 20 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_pareno_EPAREN_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_pareno_EPAREN_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_pareno_EPAREN_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_parenc ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_pareno_EPAREN_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_pareno_EPAREN_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.EPAREN_pareno_EPAREN_parenc reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 16
                    | 5 -> 16
                    | 14 -> 15
                    | 17 -> 19
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 21 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_parenc ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 22 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> uint32 * uint32 option
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_numlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> uint32 * uint32 option
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_numlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> uint32 * uint32 option
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_numlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_parenc ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> uint32 * uint32 option
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_numlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> uint32 * uint32 option
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_numlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> uint32 * uint32 option
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_numlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 23 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_strlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_id _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_strlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_numlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_strlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_parenc ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_strlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_pareno ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_strlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | T_strlit _ ->
                // reduce
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.ESIMP_strlit reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 0 -> 18
                    | 5 -> 18
                    | 14 -> 18
                    | 17 -> 18
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | 24 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // accept
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Binding
                let reductionArgs = (arg1)
                let reduced = reducer.PROGRAM_BIND reductionArgs
                result <- reduced
                accepted <- true
                keepGoing <- false
            | _ ->
                // error
                keepGoing <- false
        | 25 ->
            match lookahead with
            | _ when lookaheadIsEof ->
                // accept
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> Expr
                let reductionArgs = (arg1)
                let reduced = reducer.PROGRAM_EXPR reductionArgs
                result <- reduced
                accepted <- true
                keepGoing <- false
            | _ ->
                // error
                keepGoing <- false
        | 26 ->
            match lookahead with
            | T_id x ->
                // shift
                lhsStack.Push(x)
                if inputEnumerator.MoveNext()
                then lookahead <- inputEnumerator.Current
                else lookaheadIsEof <- true
                stateStack.Push(27)
            | _ ->
                // error
                keepGoing <- false
        | 27 ->
            match lookahead with
            | T_eq ->
                // reduce
                stateStack.Pop() |> ignore
                stateStack.Pop() |> ignore
                let arg1 = lhsStack.Pop() :?> string
                let reductionArgs = (arg1)
                let reduced = reducer.TYPEANNOT_colon_id reductionArgs
                lhsStack.Push(reduced)
                let nextState =
                    match stateStack.Peek() with
                    | 3 -> 4
                    | _ -> failwithInvalidState ()
                stateStack.Push(nextState)
            | _ ->
                // error
                keepGoing <- false
        | _ -> failwithInvalidState ()

    if accepted
    then Ok result
    else Error "TODO error reporting"
