//-----------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//-----------------------------------------------------------------------
module internal rec Kedr.AST.ParserImpl

type Terminal<'strlit, 'pareno, 'parenc, 'numlit, 'id> =
    | T_id of 'id
    | T_numlit of 'numlit
    | T_parenc of 'parenc
    | T_pareno of 'pareno
    | T_strlit of 'strlit

type Reducer<'strlit, 'pareno, 'parenc, 'numlit, 'id, 'S, 'EXPR> = {
    EXPR_id : ('id) -> 'EXPR
    EXPR_numlit : ('numlit) -> 'EXPR
    EXPR_pareno_EXPR_parenc : ('pareno * 'EXPR * 'parenc) -> 'EXPR
    EXPR_strlit : ('strlit) -> 'EXPR
    S_EXPR : ('EXPR) -> 'S
}

let parse<'symbol, 'strlit, 'pareno, 'parenc, 'numlit, 'id, 'S, 'EXPR>
    (recognizeTerminal : 'symbol -> Terminal<'strlit, 'pareno, 'parenc, 'numlit, 'id>)
    (reducer : Reducer<'strlit, 'pareno, 'parenc, 'numlit, 'id, 'S, 'EXPR>)
    (symbols : seq<'symbol>)
    : Result<'S, string> =

    let mutable state = 1
    let mutable observedSymbol = Unchecked.defaultof<'symbol>
    let mutable observedSymbolIsEof = false
    let mutable lookaheadSymbol = Unchecked.defaultof<'symbol>
    let mutable lookaheadSymbolIsEof = false
    use enumerator = symbols.GetEnumerator()
    let shift () =
        observedSymbol <- lookaheadSymbol
        observedSymbolIsEof <- lookaheadSymbolIsEof
        if not lookaheadSymbolIsEof then
            if enumerator.MoveNext()
            then lookaheadSymbol <- enumerator.Current
            else lookaheadSymbolIsEof <- true
    shift ()
    shift ()
    match state with
    | 0 -> ()
    | 1 -> ()
    | 2 -> ()
    | 3 -> ()
    | 4 -> ()
    | 5 -> ()
    | 6 -> ()
    | 7 -> ()
    | _ -> failwith "parser is in an invalid state"
    failwith "TODO"
